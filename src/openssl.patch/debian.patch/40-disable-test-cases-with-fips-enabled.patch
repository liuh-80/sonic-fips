
diff --git a/test/recipes/05-test_rand.t b/test/recipes/05-test_rand.t
index 7462630127..26b515abd7 100644
--- a/test/recipes/05-test_rand.t
+++ b/test/recipes/05-test_rand.t
@@ -12,7 +12,7 @@ use OpenSSL::Test;
 use OpenSSL::Test::Utils;
 use OpenSSL::Test qw/:DEFAULT srctop_file/;
 
-plan tests => 6;
+plan tests => 5;
 setup("test_rand");
 
 ok(run(test(["rand_test", srctop_file("test", "default.cnf")])));
@@ -23,7 +23,7 @@ SKIP: {
     ok(run(test(["rand_test", srctop_file("test", "fips.cnf")])));
 }
 
-ok(run(test(["drbgtest"])));
+#ok(run(test(["drbgtest"])));
 ok(run(test(["rand_status_test"])));
 
 SKIP: {
diff --git a/test/recipes/15-test_ecdsa.t b/test/recipes/15-test_ecdsa.t
deleted file mode 100644
index 6215a8f0f0..0000000000
--- a/test/recipes/15-test_ecdsa.t
+++ /dev/null
@@ -1,12 +0,0 @@
-#! /usr/bin/env perl
-# Copyright 2015-2016 The OpenSSL Project Authors. All Rights Reserved.
-#
-# Licensed under the Apache License 2.0 (the "License").  You may not use
-# this file except in compliance with the License.  You can obtain a copy
-# in the file LICENSE in the source distribution or at
-# https://www.openssl.org/source/license.html
-
-
-use OpenSSL::Test::Simple;
-
-simple_test("test_ecdsa", "ecdsatest", "ec");
diff --git a/test/recipes/90-test_shlibload.t b/test/recipes/90-test_shlibload.t
index 67afff607e..b5c1bb79c0 100644
--- a/test/recipes/90-test_shlibload.t
+++ b/test/recipes/90-test_shlibload.t
@@ -25,7 +25,7 @@ plan skip_all => "Test only supported in a dso build" if disabled("dso");
 plan skip_all => "Test is disabled in an address sanitizer build" unless disabled("asan");
 plan skip_all => "Test is disabled in no-atexit build" if disabled("atexit");
 
-plan tests => 10;
+plan tests => 4;
 
 my $libcrypto = platform->sharedlib('libcrypto');
 my $libssl = platform->sharedlib('libssl');
@@ -43,23 +43,23 @@ ok(run(test(["shlibloadtest", "-ssl_first", $libcrypto, $libssl, $atexit_outfile
    "running shlibloadtest -ssl_first $atexit_outfile");
 ok(check_atexit($atexit_outfile));
 
-$atexit_outfile = 'atexit-justcrypto.txt';
-1 while unlink $atexit_outfile;
-ok(run(test(["shlibloadtest", "-just_crypto", $libcrypto, $libssl, $atexit_outfile])),
-   "running shlibloadtest -just_crypto $atexit_outfile");
-ok(check_atexit($atexit_outfile));
-
-$atexit_outfile = 'atexit-dsoref.txt';
-1 while unlink $atexit_outfile;
-ok(run(test(["shlibloadtest", "-dso_ref", $libcrypto, $libssl, $atexit_outfile])),
-   "running shlibloadtest -dso_ref $atexit_outfile");
-ok(check_atexit($atexit_outfile));
-
-$atexit_outfile = 'atexit-noatexit.txt';
-1 while unlink $atexit_outfile;
-ok(run(test(["shlibloadtest", "-no_atexit", $libcrypto, $libssl, $atexit_outfile])),
-   "running shlibloadtest -no_atexit $atexit_outfile");
-ok(!check_atexit($atexit_outfile));
+#$atexit_outfile = 'atexit-justcrypto.txt';
+#1 while unlink $atexit_outfile;
+#ok(run(test(["shlibloadtest", "-just_crypto", $libcrypto, $libssl, $atexit_outfile])),
+#   "running shlibloadtest -just_crypto $atexit_outfile");
+#ok(check_atexit($atexit_outfile));
+
+#$atexit_outfile = 'atexit-dsoref.txt';
+#1 while unlink $atexit_outfile;
+#ok(run(test(["shlibloadtest", "-dso_ref", $libcrypto, $libssl, $atexit_outfile])),
+#   "running shlibloadtest -dso_ref $atexit_outfile");
+#ok(check_atexit($atexit_outfile));
+
+#$atexit_outfile = 'atexit-noatexit.txt';
+#1 while unlink $atexit_outfile;
+#ok(run(test(["shlibloadtest", "-no_atexit", $libcrypto, $libssl, $atexit_outfile])),
+#   "running shlibloadtest -no_atexit $atexit_outfile");
+#ok(!check_atexit($atexit_outfile));
 
 sub check_atexit {
     my $filename = shift;
diff --git a/test/recipes/30-test_evp_extra.t b/test/recipes/30-test_evp_extra.t
deleted file mode 100644
index ad4bdc21f2..0000000000
--- a/test/recipes/30-test_evp_extra.t
+++ /dev/null
@@ -1,34 +0,0 @@
-#! /usr/bin/env perl
-# Copyright 2015-2021 The OpenSSL Project Authors. All Rights Reserved.
-#
-# Licensed under the Apache License 2.0 (the "License").  You may not use
-# this file except in compliance with the License.  You can obtain a copy
-# in the file LICENSE in the source distribution or at
-# https://www.openssl.org/source/license.html
-
-
-use strict;
-use warnings;
-
-use OpenSSL::Test qw/:DEFAULT bldtop_dir srctop_file/;
-use OpenSSL::Test::Utils;
-
-setup("test_evp_extra");
-
-my $no_conf_autoload = disabled('autoload-config');
-
-plan tests => $no_conf_autoload ? 3 : 4;
-
-ok(run(test(["evp_extra_test"])), "running evp_extra_test");
-
-unless ($no_conf_autoload) {
-    local $ENV{OPENSSL_CONF} = srctop_file("test","default-for-evptest.cnf");
-    ok(run(test(["evp_extra_test", "-config", srctop_file("test","default-for-evptest.cnf")])),
-       "running evp_extra_test to test evp properties set in config");
-    delete local $ENV{OPENSSL_CONF};
-}
-
-# Run tests with a non-default library context
-ok(run(test(["evp_extra_test", "-context"])), "running evp_extra_test with a non-default library context");
-
-ok(run(test(["evp_extra_test2"])), "running evp_extra_test2");
diff --git a/test/recipes/90-test_includes.t b/test/recipes/90-test_includes.t
index 5ff61910c5..10e47bbdfd 100644
--- a/test/recipes/90-test_includes.t
+++ b/test/recipes/90-test_includes.t
@@ -14,15 +14,15 @@ plan skip_all => "test_includes doesn't work without posix-io"
 delete $ENV{OPENSSL_CONF_INCLUDE};
 
 plan tests =>                   # The number of tests being performed
-    7
+    3
     + ($^O eq "VMS" ? 2 : 0);
 
 $ENV{OPENSSL_MODULES} = abs_path(bldtop_dir("providers"));
 
-ok(run(test(["conf_include_test", data_file("includes.cnf")])), "test directory includes");
-ok(run(test(["conf_include_test", data_file("includes-file.cnf")])), "test file includes");
-ok(run(test(["conf_include_test", data_file("includes-eq.cnf")])), "test includes with equal character");
-ok(run(test(["conf_include_test", data_file("includes-eq-ws.cnf")])), "test includes with equal and whitespaces");
+#ok(run(test(["conf_include_test", data_file("includes.cnf")])), "test directory includes");
+#ok(run(test(["conf_include_test", data_file("includes-file.cnf")])), "test file includes");
+#ok(run(test(["conf_include_test", data_file("includes-eq.cnf")])), "test includes with equal character");
+#ok(run(test(["conf_include_test", data_file("includes-eq-ws.cnf")])), "test includes with equal and whitespaces");
 if ($^O eq "VMS") {
     ok(run(test(["conf_include_test", data_file("vms-includes.cnf")])),
        "test directory includes, VMS syntax");
diff --git a/test/recipes/15-test_mp_rsa.t b/test/recipes/15-test_mp_rsa.t
deleted file mode 100644
index 956626de00..0000000000
--- a/test/recipes/15-test_mp_rsa.t
+++ /dev/null
@@ -1,126 +0,0 @@
-#! /usr/bin/env perl
-# Copyright 2017-2023 The OpenSSL Project Authors. All Rights Reserved.
-# Copyright 2017 BaishanCloud. All rights reserved.
-#
-# Licensed under the Apache License 2.0 (the "License").  You may not use
-# this file except in compliance with the License.  You can obtain a copy
-# in the file LICENSE in the source distribution or at
-# https://www.openssl.org/source/license.html
-
-
-use strict;
-use warnings;
-
-use File::Spec;
-use OpenSSL::Test qw/:DEFAULT data_file/;
-use OpenSSL::Test::Utils;
-
-setup("test_mp_rsa");
-
-my @test_param = (
-    # 3 primes, 2048-bit
-    {
-        primes => '3',
-        bits => '2048',
-    },
-    # 4 primes, 4096-bit
-    {
-        primes => '4',
-        bits => '4096',
-    },
-    # 5 primes, 8192-bit
-    {
-        primes => '5',
-        bits => '8192',
-    },
-);
-
-plan tests => 2 + scalar(@test_param) * 5 * 2;
-
-ok(run(test(["rsa_mp_test"])), "running rsa multi prime test");
-
-ok(run(app(['openssl', 'pkey', '-noout', '-check', '-in',
-            data_file('rsamplcm.pem')])), "checking lcm in key check");
-
-my $cleartext = data_file("plain_text");
-
-# genrsa
-run_mp_tests(0);
-# evp
-run_mp_tests(1);
-
-sub run_mp_tests {
-    my $evp = shift;
-
-    foreach my $param (@test_param) {
-        my $primes = $param->{primes};
-        my $bits = $param->{bits};
-        my $name = ($evp ? "evp" : "") . "${bits}p${primes}";
-
-        if ($evp) {
-            ok(run(app([ 'openssl', 'genpkey', '-out', "rsamptest-$name.pem",
-                         '-algorithm', 'RSA',
-                         '-pkeyopt', "rsa_keygen_primes:$primes",
-                         '-pkeyopt', "rsa_keygen_bits:$bits"])),
-               "genrsa $name");
-            ok(run(app([ 'openssl', 'pkey', '-check',
-                         '-in', "rsamptest-$name.pem", '-noout'])),
-               "rsa -check $name");
-            ok(run(app([ 'openssl', 'pkeyutl', '-inkey', "rsamptest-$name.pem",
-                         '-encrypt', '-in', $cleartext,
-                         '-out', "rsamptest-$name.enc" ])),
-               "rsa $name encrypt");
-            ok(run(app([ 'openssl', 'pkeyutl', '-inkey', "rsamptest-$name.pem",
-                         '-decrypt', '-in', "rsamptest-$name.enc",
-                         '-out', "rsamptest-$name.dec" ])),
-               "rsa $name decrypt");
-        } else {
-            ok(run(app([ 'openssl', 'genrsa', '-out', "rsamptest-$name.pem",
-                         '-primes', $primes, $bits])), "genrsa $name");
-            ok(run(app([ 'openssl', 'rsa', '-check',
-                         '-in', "rsamptest-$name.pem", '-noout'])),
-               "rsa -check $name");
-            if (!disabled('deprecated-3.0')) {
-                ok(run(app([ 'openssl', 'rsautl', '-inkey', "rsamptest-$name.pem",
-                             '-encrypt', '-in', $cleartext,
-                             '-out', "rsamptest-$name.enc" ])),
-                   "rsa $name encrypt");
-                ok(run(app([ 'openssl', 'rsautl', '-inkey', "rsamptest-$name.pem",
-                             '-decrypt', '-in', "rsamptest-$name.enc",
-                             '-out', "rsamptest-$name.dec" ])),
-                   "rsa $name decrypt");
-            } else {
-                ok(run(app([ 'openssl', 'pkeyutl', '-inkey', "rsamptest-$name.pem",
-                             '-encrypt', '-in', $cleartext,
-                             '-out', "rsamptest-$name.enc" ])),
-                   "rsa $name encrypt");
-                ok(run(app([ 'openssl', 'pkeyutl', '-inkey', "rsamptest-$name.pem",
-                             '-decrypt', '-in', "rsamptest-$name.enc",
-                             '-out', "rsamptest-$name.dec" ])),
-                   "rsa $name decrypt");
-            }
-        }
-        ok(check_msg("rsamptest-$name.dec"), "rsa $name check result");
-    }
-}
-
-sub check_msg {
-    my $decrypted = shift;
-    my $msg;
-    my $dec;
-
-    open(my $fh, "<", $cleartext) or return 0;
-    binmode $fh;
-    read($fh, $msg, 10240);
-    close $fh;
-    open($fh, "<", $decrypted ) or return 0;
-    binmode $fh;
-    read($fh, $dec, 10240);
-    close $fh;
-
-    if ($msg ne $dec) {
-        print STDERR "cleartext and decrypted are not the same";
-        return 0;
-    }
-    return 1;
-}
diff --git a/test/recipes/15-test_rsapss.t b/test/recipes/15-test_rsapss.t
deleted file mode 100644
index 35be4784fc..0000000000
--- a/test/recipes/15-test_rsapss.t
+++ /dev/null
@@ -1,134 +0,0 @@
-#! /usr/bin/env perl
-# Copyright 2017-2023 The OpenSSL Project Authors. All Rights Reserved.
-#
-# Licensed under the Apache License 2.0 (the "License").  You may not use
-# this file except in compliance with the License.  You can obtain a copy
-# in the file LICENSE in the source distribution or at
-# https://www.openssl.org/source/license.html
-
-
-use strict;
-use warnings;
-
-use File::Spec;
-use OpenSSL::Test qw/:DEFAULT with srctop_file data_file/;
-use OpenSSL::Test::Utils;
-
-setup("test_rsapss");
-
-plan tests => 18;
-
-#using test/testrsa.pem which happens to be a 512 bit RSA
-ok(run(app(['openssl', 'dgst', '-sign', srctop_file('test', 'testrsa.pem'), '-sha1',
-            '-sigopt', 'rsa_padding_mode:pss',
-            '-sigopt', 'rsa_pss_saltlen:max',
-            '-sigopt', 'rsa_mgf1_md:sha512',
-            '-out', 'testrsapss-restricted.sig',
-            srctop_file('test', 'testrsa.pem')])),
-   "openssl dgst -sign [plain RSA key, PSS padding mode, PSS restrictions]");
-
-ok(run(app(['openssl', 'dgst', '-sign', srctop_file('test', 'testrsa.pem'), '-sha1',
-            '-sigopt', 'rsa_padding_mode:pss',
-            '-out', 'testrsapss-unrestricted.sig',
-            srctop_file('test', 'testrsa.pem')])),
-   "openssl dgst -sign [plain RSA key, PSS padding mode, no PSS restrictions]");
-
-ok(!run(app(['openssl', 'dgst', '-sign', srctop_file('test', 'testrsa.pem'), '-sha512',
-             '-sigopt', 'rsa_padding_mode:pss', '-sigopt', 'rsa_pss_saltlen:max',
-             '-sigopt', 'rsa_mgf1_md:sha512', srctop_file('test', 'testrsa.pem')])),
-   "openssl dgst -sign, expect to fail gracefully");
-
-ok(!run(app(['openssl', 'dgst', '-sign', srctop_file('test', 'testrsa.pem'), '-sha512',
-             '-sigopt', 'rsa_padding_mode:pss', '-sigopt', 'rsa_pss_saltlen:2147483647',
-             '-sigopt', 'rsa_mgf1_md:sha1', srctop_file('test', 'testrsa.pem')])),
-   "openssl dgst -sign, expect to fail gracefully");
-
-ok(!run(app(['openssl', 'dgst', '-prverify', srctop_file('test', 'testrsa.pem'), '-sha512',
-             '-sigopt', 'rsa_padding_mode:pss', '-sigopt', 'rsa_pss_saltlen:max',
-             '-sigopt', 'rsa_mgf1_md:sha512', '-signature', 'testrsapss.sig',
-             srctop_file('test', 'testrsa.pem')])),
-   "openssl dgst -prverify, expect to fail gracefully");
-
-ok(run(app(['openssl', 'dgst', '-prverify', srctop_file('test', 'testrsa.pem'),
-            '-sha1',
-            '-sigopt', 'rsa_padding_mode:pss',
-            '-sigopt', 'rsa_pss_saltlen:max',
-            '-sigopt', 'rsa_mgf1_md:sha512',
-            '-signature', 'testrsapss-restricted.sig',
-            srctop_file('test', 'testrsa.pem')])),
-   "openssl dgst -prverify [plain RSA key, PSS padding mode, PSS restrictions]");
-
-ok(run(app(['openssl', 'dgst', '-prverify', srctop_file('test', 'testrsa.pem'),
-            '-sha1',
-            '-sigopt', 'rsa_padding_mode:pss',
-            '-sigopt', 'rsa_pss_saltlen:42',
-            '-sigopt', 'rsa_mgf1_md:sha512',
-            '-signature', 'testrsapss-restricted.sig',
-            srctop_file('test', 'testrsa.pem')])),
-   "openssl dgst -sign rsa512bit.pem -sha1 -sigopt rsa_pss_saltlen:max produces 42 bits of PSS salt");
-
-ok(run(app(['openssl', 'dgst', '-prverify', srctop_file('test', 'testrsa.pem'),
-            '-sha1',
-            '-sigopt', 'rsa_padding_mode:pss',
-            '-sigopt', 'rsa_pss_saltlen:auto-digestmax',
-            '-sigopt', 'rsa_mgf1_md:sha512',
-            '-signature', 'testrsapss-restricted.sig',
-            srctop_file('test', 'testrsa.pem')])),
-   "openssl dgst -prverify rsa512bit.pem -sha1 -sigopt rsa_pss_saltlen:auto-digestmax verifies signatures with saltlen > digestlen");
-
-ok(run(app(['openssl', 'dgst', '-prverify', srctop_file('test', 'testrsa.pem'),
-            '-sha1',
-            '-sigopt', 'rsa_padding_mode:pss',
-            '-signature', 'testrsapss-unrestricted.sig',
-            srctop_file('test', 'testrsa.pem')])),
-   "openssl dgst -prverify [plain RSA key, PSS padding mode, no PSS restrictions]");
-
-ok(run(app(['openssl', 'dgst', '-sign', srctop_file('test', 'testrsa.pem'), '-sha1',
-            '-sigopt', 'rsa_padding_mode:pss',
-            '-sigopt', 'rsa_pss_saltlen:auto-digestmax',
-            '-out', 'testrsapss-sha1-autodigestmax.sig',
-            srctop_file('test', 'testrsa.pem')])),
-   "openssl dgst -sign -sha1 -rsa_pss_saltlen:auto-digestmax");
-ok(run(app(['openssl', 'dgst', '-prverify', srctop_file('test', 'testrsa.pem'), '-sha1',
-            '-sigopt', 'rsa_padding_mode:pss',
-            '-sigopt', 'rsa_pss_saltlen:20',
-            '-signature', 'testrsapss-sha1-autodigestmax.sig',
-            srctop_file('test', 'testrsa.pem')])),
-   "openssl dgst -sign -sha1 -rsa_padding_mode:auto-digestmax produces 20 (i.e., digestlen) bits of PSS salt");
-
-ok(run(app(['openssl', 'dgst', '-sign', srctop_file('test', 'testrsa.pem'), '-sha256',
-            '-sigopt', 'rsa_padding_mode:pss',
-            '-sigopt', 'rsa_pss_saltlen:auto-digestmax',
-            '-out', 'testrsapss-sha256-autodigestmax.sig',
-            srctop_file('test', 'testrsa.pem')])),
-   "openssl dgst -sign -sha256 -rsa_pss_saltlen:auto-digestmax");
-ok(run(app(['openssl', 'dgst', '-prverify', srctop_file('test', 'testrsa.pem'), '-sha256',
-            '-sigopt', 'rsa_padding_mode:pss',
-            '-sigopt', 'rsa_pss_saltlen:30',
-            '-signature', 'testrsapss-sha256-autodigestmax.sig',
-            srctop_file('test', 'testrsa.pem')])),
-   "openssl dgst -sign rsa512bit.pem -sha256 -rsa_padding_mode:auto-digestmax produces 30 bits of PSS salt (due to 512bit key)");
-
-# Test that RSA-PSS keys are supported by genpkey and rsa commands.
-{
-   my $rsapss = "rsapss.key";
-   ok(run(app(['openssl', 'genpkey', '-algorithm', 'RSA-PSS',
-               '-pkeyopt', 'rsa_keygen_bits:1024',
-               '-pkeyopt', 'rsa_keygen_pubexp:65537',
-               '-pkeyopt', 'rsa_keygen_primes:2',
-               '--out', $rsapss])));
-   ok(run(app(['openssl', 'rsa', '-check',
-               '-in', $rsapss])));
-}
-
-ok(!run(app([ 'openssl', 'rsa',
-             '-in' => data_file('negativesaltlen.pem')],
-             '-out' => 'badout')));
-
-ok(run(app(['openssl', 'genpkey', '-algorithm', 'RSA-PSS', '-pkeyopt', 'rsa_keygen_bits:1024',
-            '-pkeyopt', 'rsa_pss_keygen_md:SHA256', '-pkeyopt', 'rsa_pss_keygen_saltlen:10',
-            '-out', 'testrsapss.pem'])),
-   "openssl genpkey RSA-PSS with pss parameters");
-ok(run(app(['openssl', 'pkey', '-in', 'testrsapss.pem', '-pubout', '-text'])),
-   "openssl pkey, execute rsa_pub_encode with pss parameters");
-unlink 'testrsapss.pem';
diff --git a/test/recipes/80-test_cms.t b/test/recipes/80-test_cms.t
index 40dd585c18..e5077457b9 100644
--- a/test/recipes/80-test_cms.t
+++ b/test/recipes/80-test_cms.t
@@ -518,7 +518,7 @@ my @smime_cms_param_tests = (
     [ "signed content test streaming PEM format, RSA keys, PSS signature, SHA384 MGF1",
       [ "{cmd1}", @prov, "-sign", "-in", $smcont, "-outform", "PEM", "-nodetach",
         "-signer", $smrsa1,
-        "-keyopt", "rsa_padding_mode:pss", "-keyopt", "rsa_mgf1_md:sha384",
+        "-keyopt", "rsa_padding_mode:pss", "-md", "sha384", "-keyopt", "rsa_mgf1_md:sha384",
         "-out", "{output}.cms" ],
       [ "{cmd2}", @prov, "-verify", "-in", "{output}.cms", "-inform", "PEM",
         "-CAfile", $smroot, "-out", "{output}.txt" ],
diff --git a/test/recipes/30-test_engine.t b/test/recipes/30-test_engine.t
deleted file mode 100644
index 88db8ec9a7..0000000000
--- a/test/recipes/30-test_engine.t
+++ /dev/null
@@ -1,25 +0,0 @@
-#! /usr/bin/env perl
-# Copyright 2015-2020 The OpenSSL Project Authors. All Rights Reserved.
-#
-# Licensed under the Apache License 2.0 (the "License").  You may not use
-# this file except in compliance with the License.  You can obtain a copy
-# in the file LICENSE in the source distribution or at
-# https://www.openssl.org/source/license.html
-
-
-use strict;
-use warnings;
-
-use OpenSSL::Test qw/:DEFAULT srctop_file/;
-use OpenSSL::Test::Utils;
-
-setup("test_engine");
-
-my @path = qw(test certs);
-
-plan skip_all => "engines are deprecated"
-    if disabled('deprecated-3.0');
-
-plan tests => 1;
-ok(run(test(["enginetest", srctop_file(@path, "root-cert.pem")])),
-   "running enginetest");
